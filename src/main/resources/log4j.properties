#设置日志级别为(DEBUG、INFO、WARN、ERROR、FATAL)的日志信息输出到控制台和文件两个目的地
log4j.rootLogger=INFO, stdout, file1, file2

###设置日志消息输出到控制台 ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

###设置INFO级别日志消息每天输出到日志文件info.log ###
log4j.appender.file1 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.file1.File = logs/info.log
log4j.appender.file1.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.file1.Append = true
log4j.appender.file1.Threshold = INFO
log4j.appender.file1.layout = org.apache.log4j.PatternLayout
log4j.appender.file1.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %5p %l - %m%n

###设置ERROR级别日志消息每天输出到日志文件error.log ###
log4j.appender.file2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.file2.File = ../logs/error.log
log4j.appender.file2.DatePattern = '_'yyyy-MM-dd'.log'
log4j.appender.file2.Append = true
log4j.appender.file2.Threshold = ERROR
log4j.appender.file2.layout = org.apache.log4j.PatternLayout
log4j.appender.file2.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %5p %l - %m%n

# %c 输出日志信息所属的类的全名 
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss}，输出类似：2002-10-18- 22：10：28
# %f 输出日志信息所属的类的类名 
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
# %m 输出代码中指定的信息，如log(message)中的message 
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数 
# %t 输出产生该日志事件的线程名
